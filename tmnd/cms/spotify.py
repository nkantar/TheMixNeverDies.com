from collections import defaultdict
from pathlib import Path
import tempfile

from keysort import keysort
from loguru import logger
import spotipy

from django.conf import settings


MAX_ADD_REMOVE_TRACKS = 100


def auth(username, refresh_token):
    logger.info(f"Authenticating as {username}")

    cache_path = Path(tempfile.gettempdir()) / f".cache-{username}"
    oauth = spotipy.oauth2.SpotifyOAuth(
        client_id=settings.SPOTIFY_CLIENT_ID,
        client_secret=settings.SPOTIFY_CLIENT_SECRET,
        redirect_uri=settings.SPOTIFY_REDIRECT_URI,
        scope=settings.SPOTIFY_SCOPES,
        cache_path=cache_path,
        username=username,
        open_browser=False,
    )
    oauth.refresh_access_token(refresh_token)
    sp = spotipy.Spotify(auth_manager=oauth)

    return sp


def fetch_saved_tracks(username, sp, offset=0):
    logger.info(f"Fetching saved tracks for {username} with offset {offset}")

    page = sp.current_user_saved_tracks(offset=offset)
    tracks = page["items"]

    if page["next"]:
        new_offset = page["offset"] + page["limit"]
        tracks.extend(fetch_saved_tracks(username, sp, new_offset))

    tracks = keysort(tracks, ["added_at"])

    return tracks


def create_playlist(username, sp):
    logger.info(f"Creating playlist for {username}")

    playlist_name = f"{username}'s Liked Songs"
    playlist = sp.user_playlist_create(
        user=username,
        name=playlist_name,
        public=True,
        collaborative=False,
        description="Automatically generated by TheMixNeverDies.com",
    )

    return playlist


def fetch_playlist_tracks(username, sp, playlist_id, offset=0):
    logger.info(f"Fetching playlist tracks for {username} with offset {offset}")

    page = sp.user_playlist_tracks(
        user=username,
        playlist_id=playlist_id,
        offset=offset,
    )
    tracks = page["items"]

    if page["next"]:
        new_offset = page["offset"] + page["limit"]
        tracks.extend(fetch_playlist_tracks(username, sp, playlist_id, new_offset))

    return tracks


def clear_playlist(username, sp, playlist_id):
    logger.info(f"Clearing playlist for {username}")

    tracks = fetch_playlist_tracks(username, sp, playlist_id)
    track_ids = [track["track"]["id"] for track in tracks]

    pages = defaultdict(list)
    for idx, track_id in enumerate(track_ids):
        page_idx = idx // MAX_ADD_REMOVE_TRACKS
        pages[page_idx].append(track_id)

    for page in pages.values():
        sp.user_playlist_remove_all_occurrences_of_tracks(
            user=username,
            playlist_id=playlist_id,
            tracks=page,
        )


def populate_playlist(username, sp, playlist_id, track_ids):
    logger.info(f"Populating playlist for {username}")

    pages = defaultdict(list)
    for idx, track_id in enumerate(reversed(track_ids)):
        page_idx = idx // MAX_ADD_REMOVE_TRACKS
        pages[page_idx].append(track_id)

    for page in pages.values():
        sp.user_playlist_add_tracks(
            user=username,
            playlist_id=playlist_id,
            tracks=page,
        )


def update_playlist(username, sp, playlist_id, liked_track_ids):
    logger.info(f"Updating playlist for {username}")

    clear_playlist(username, sp, playlist_id)
    populate_playlist(username, sp, playlist_id, liked_track_ids)
